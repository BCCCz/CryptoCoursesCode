from Crypto.Util.number import *
from numpy import *
from gmpy2 import *
import random
import time

def time_me(fn):
    def _wrapper(*args, **kwargs):
        start = time.clock()
        fn(*args, **kwargs)
        print("%s cost %s second" % (fn.__name__, time.clock() - start))
    return _wrapper

@time_me
def KU1():
    phi = 19125300477911064944203260029111500646254206042136795139366403071720117293347460677192092890322507789576556794183924835781878082866021372677178759317629999383261244396504263652054942631485146309147421420396641541786688080364493544403329012522482772016261738998155764710613462380937819527219455993959314572832826227490626104394868411395559444327511526070029463334513334612159815012825842862314497366613865465059615869067241660438002050546171072661813967826823078945061741400979032664659273269314872698074422129032107626442983567600598518614700884852156234815480851862646441548238996304624083041008687733323558709991840
    e = mpz(65537)
    return invert(e,phi)

@time_me
def Euclid():
    a = 19125300477911064944203260029111500646254206042136795139366403071720117293347460677192092890322507789576556794183924835781878082866021372677178759317629999383261244396504263652054942631485146309147421420396641541786688080364493544403329012522482772016261738998155764710613462380937819527219455993959314572832826227490626104394868411395559444327511526070029463334513334612159815012825842862314497366613865465059615869067241660438002050546171072661813967826823078945061741400979032664659273269314872698074422129032107626442983567600598518614700884852156234815480851862646441548238996304624083041008687733323558709991840
    b = 65537
    x1,x2,x3 = 1,0,a
    y1,y2,y3 = 0,1,b
    while(y3 != 0):
        Q = x3//y3
        t1,t2,t3 = x1-Q*y1,x2-Q*y2,x3-Q*y3
        x1,x2,x3 = y1,y2,y3
        y1,y2,y3 = t1,t2,t3
    return x1

@time_me
def KU2():
    a = is_prime(98587247115547494222459848809042454480914862662066330780449870422326866540532025570440024152230493093041769169299236621952786103514773260233179074760324270949797200926034339928427006342257856206280033526017101489286486111453296214715665820701314306911028128902529327567058127861469746810196848240107247435419)
    return a

@time_me
def fermat():
    n = 98587247115547494222459848809042454480914862662066330780449870422326866540532025570440024152230493093041769169299236621952786103514773260233179074760324270949797200926034339928427006342257856206280033526017101489286486111453296214715665820701314306911028128902529327567058127861469746810196848240107247435419
    res = powmod(2, n-1, n)
    return res == 1
@time_me
def fermat2():
    n = 98587247115547494222459848809042454480914862662066330780449870422326866540532025570440024152230493093041769169299236621952786103514773260233179074760324270949797200926034339928427006342257856206280033526017101489286486111453296214715665820701314306911028128902529327567058127861469746810196848240107247435419
    def multimod(a,k,n):    #快速幂取模
        ans=1
        while(k!=0):
            if k%2:         
                ans=(ans%n)*(a%n)%n
            a=(a%n)*(a%n)%n
            k=k//2          
        return ans
    res = multimod(2, n-1, n)
    return res == 1

@time_me
def KU3():
    getPrime(1024)

@time_me
def generateLargePrime():
    while True:
        num = random.randrange(2 ** (1024 - 1), 2 ** 1024)
        if isPrime(num):
            return num

KU1()
Euclid()

KU2()
fermat()
fermat2()

KU3()
generateLargePrime()